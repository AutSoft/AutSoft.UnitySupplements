//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityEngine;
using UnityEngine.SceneManagement;

namespace AutSoft.UnitySupplements.ResourceGenerator.Sample
{
    public static partial class ResourcePaths
    {
        public static partial class Scenes
        {

            public const string TimelineSample = "AutSoft.UnitySupplements.Samples/TimelineSamples/TimelineSample";
            public static void LoadTimelineSample(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadScene(TimelineSample, mode);
            public static AsyncOperation LoadAsyncTimelineSample(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadSceneAsync(TimelineSample, mode);

            public const string CreatePrefab = "AutSoft.UnitySupplements.Samples/ResourceGeneratorSamples/Scenes/CreatePrefab";
            public static void LoadCreatePrefab(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadScene(CreatePrefab, mode);
            public static AsyncOperation LoadAsyncCreatePrefab(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadSceneAsync(CreatePrefab, mode);

            public const string LoadSceneInitial = "AutSoft.UnitySupplements.Samples/ResourceGeneratorSamples/Scenes/LoadSceneInitial";
            public static void LoadLoadSceneInitial(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadScene(LoadSceneInitial, mode);
            public static AsyncOperation LoadAsyncLoadSceneInitial(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadSceneAsync(LoadSceneInitial, mode);

            public const string LoadSceneNext = "AutSoft.UnitySupplements.Samples/ResourceGeneratorSamples/Scenes/LoadSceneNext";
            public static void LoadLoadSceneNext(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadScene(LoadSceneNext, mode);
            public static AsyncOperation LoadAsyncLoadSceneNext(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadSceneAsync(LoadSceneNext, mode);

            public const string Binding = "AutSoft.UnitySupplements.Samples/VitaminSamples/Scenes/Binding";
            public static void LoadBinding(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadScene(Binding, mode);
            public static AsyncOperation LoadAsyncBinding(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadSceneAsync(Binding, mode);

            public const string GeneratePolygon = "AutSoft.UnitySupplements.Samples/VitaminSamples/Scenes/GeneratePolygon";
            public static void LoadGeneratePolygon(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadScene(GeneratePolygon, mode);
            public static AsyncOperation LoadAsyncGeneratePolygon(LoadSceneMode mode = LoadSceneMode.Single) => SceneManager.LoadSceneAsync(GeneratePolygon, mode);

        }

        public static partial class Prefabs
        {

            public const string Cube = "Cube";
            public static GameObject LoadCube() => Resources.Load<GameObject>(Cube);

        }

        public static partial class Materials
        {

            public const string Cube = "Cube";
            public static Material LoadCube() => Resources.Load<Material>(Cube);

            public const string CubeAlt = "CubeAlt";
            public static Material LoadCubeAlt() => Resources.Load<Material>(CubeAlt);

            public const string LiberationSansSDF_DropShadow = "Fonts & Materials/LiberationSans SDF - Drop Shadow";
            public static Material LoadLiberationSansSDF_DropShadow() => Resources.Load<Material>(LiberationSansSDF_DropShadow);

            public const string LiberationSansSDF_Outline = "Fonts & Materials/LiberationSans SDF - Outline";
            public static Material LoadLiberationSansSDF_Outline() => Resources.Load<Material>(LiberationSansSDF_Outline);

        }

        public static partial class AudioClips
        {

            public const string CoinSpin = "Coin Spin";
            public static AudioClip LoadCoinSpin() => Resources.Load<AudioClip>(CoinSpin);

            public const string Coin1 = "Coin 1";
            public static AudioClip LoadCoin1() => Resources.Load<AudioClip>(Coin1);

            public const string Coin = "Coin";
            public static AudioClip LoadCoin() => Resources.Load<AudioClip>(Coin);

        }

        public static partial class TextAssets
        {

            public const string LineBreakingFollowingCharacters = "LineBreaking Following Characters";
            public static TextAsset LoadLineBreakingFollowingCharacters() => Resources.Load<TextAsset>(LineBreakingFollowingCharacters);

            public const string LineBreakingLeadingCharacters = "LineBreaking Leading Characters";
            public static TextAsset LoadLineBreakingLeadingCharacters() => Resources.Load<TextAsset>(LineBreakingLeadingCharacters);

            public const string AppSettings = "AppSettings";
            public static TextAsset LoadAppSettings() => Resources.Load<TextAsset>(AppSettings);

        }

        public static partial class Layers
        {

            public const string Default = "Default";
            public static int GetDefaultIndex() => LayerMask.NameToLayer(Default);
            public static int GetDefaultMask() => LayerMask.GetMask(Default);
            public const string TransparentFX = "TransparentFX";
            public static int GetTransparentFXIndex() => LayerMask.NameToLayer(TransparentFX);
            public static int GetTransparentFXMask() => LayerMask.GetMask(TransparentFX);
            public const string IgnoreRaycast = "Ignore Raycast";
            public static int GetIgnoreRaycastIndex() => LayerMask.NameToLayer(IgnoreRaycast);
            public static int GetIgnoreRaycastMask() => LayerMask.GetMask(IgnoreRaycast);
            public const string Water = "Water";
            public static int GetWaterIndex() => LayerMask.NameToLayer(Water);
            public static int GetWaterMask() => LayerMask.GetMask(Water);
            public const string UI = "UI";
            public static int GetUIIndex() => LayerMask.NameToLayer(UI);
            public static int GetUIMask() => LayerMask.GetMask(UI);
        }

#if UNITY_EDITOR
        public static partial class LoadSceneButtons
        {

            [UnityEditor.MenuItem("Load Scene / TimelineSample")]
            public static void LoadTimelineSample()
            {
                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\TimelineSamples\TimelineSample.unity");
            }
            [UnityEditor.MenuItem("Load Scene / CreatePrefab")]
            public static void LoadCreatePrefab()
            {
                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\ResourceGeneratorSamples\Scenes\CreatePrefab.unity");
            }
            [UnityEditor.MenuItem("Load Scene / LoadSceneInitial")]
            public static void LoadLoadSceneInitial()
            {
                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\ResourceGeneratorSamples\Scenes\LoadSceneInitial.unity");
            }
            [UnityEditor.MenuItem("Load Scene / LoadSceneNext")]
            public static void LoadLoadSceneNext()
            {
                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\ResourceGeneratorSamples\Scenes\LoadSceneNext.unity");
            }
            [UnityEditor.MenuItem("Load Scene / Binding")]
            public static void LoadBinding()
            {
                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\VitaminSamples\Scenes\Binding.unity");
            }
            [UnityEditor.MenuItem("Load Scene / GeneratePolygon")]
            public static void LoadGeneratePolygon()
            {
                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\VitaminSamples\Scenes\GeneratePolygon.unity");
            }

            [UnityEditor.MenuItem("Play Scene / TimelineSample")]
            public static void PlayTimelineSample()
            {
                if (UnityEditor.EditorApplication.isPlaying)
                {
                    UnityEditor.EditorApplication.isPlaying = false;
                    return;
                }

                UnityEditor.SceneManagement.EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo();
                UnityEditor.SceneManagement.EditorSceneManager.OpenScene(@"Assets\AutSoft.UnitySupplements.Samples\TimelineSamples\TimelineSample.unity");
                UnityEditor.EditorApplication.isPlaying = true;
            }
        }
#endif

    }
}